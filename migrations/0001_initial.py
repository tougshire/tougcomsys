# Generated by Django 4.2 on 2023-04-19 13:39

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the thread', max_length=100, verbose_name='title')),
                ('above_content_image_link', models.URLField(blank=True, help_text='The link for the image displayed above content', verbose_name='above content image link')),
                ('above_content_image_attributes', models.CharField(blank=True, help_text='The attributes (ie style="width:60%") for the image for the image displayed above content', max_length=70, verbose_name='above content image attributes')),
                ('above_content_link_attributes', models.CharField(blank=True, help_text='The attributes (ie target="_blank") for the link for the image displayed above content', max_length=70, verbose_name='above content link attributes')),
                ('below_content_image_attributes', models.CharField(blank=True, help_text='The attributes (ie style="width:60%") for the image for the image displayed below content', max_length=70, verbose_name='below content image attributes')),
                ('below_content_image_link', models.URLField(blank=True, help_text='The link for the image displayed below content', verbose_name='below content image link')),
                ('below_content_link_attributes', models.CharField(blank=True, help_text='The attributes (ie target="_blank") for the link for the image displayed below content', max_length=70, verbose_name='below content link attributes')),
                ('starttime', models.TimeField(blank=True, help_text='The start time of the event', null=True, verbose_name='starting')),
                ('lenmin', models.IntegerField(blank=True, default=0, help_text='How long the event lasts (0 indicates indefinite or unkown)', verbose_name='length(minutes)')),
                ('content_format', models.CharField(choices=[('markdown', 'markdown'), ('html', 'html')], default='markdown', help_text='The format (or markup method) used for the content', max_length=20, verbose_name='content format')),
                ('content', models.TextField(blank=True, help_text='The content of the post', verbose_name='content')),
                ('summary_format', models.CharField(choices=[('same', 'same as content'), ('markdown', 'markdown'), ('html', 'html')], default='same', help_text='The format (or markup method) used for the summary', max_length=20, verbose_name='content format')),
                ('summary', models.TextField(blank=True, help_text='A shorter version of the content', verbose_name='summary')),
                ('draft_status', models.IntegerField(choices=[(7, 'published'), (3, 'archived'), (0, 'draft')], default=0, help_text='If this post is a draft, which only displays in preview mode', verbose_name='draft status')),
                ('slug', models.SlugField(help_text='The code that provides a character based ID for this page', unique=True)),
            ],
            options={
                'ordering': ['starttime', 'lenmin'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the image', max_length=100, verbose_name='Title')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date/time this image was created', verbose_name='created')),
                ('file', models.ImageField(blank=True, help_text='The file to be uploaded - can be blank if URL is entered and no file needs to be uploaded - Is removed once saved', null=True, upload_to='gallery/')),
                ('url', models.URLField(blank=True, help_text='The URL.  This will be overwritten if a file is uploaded', verbose_name='URL')),
                ('author', models.ForeignKey(blank=True, help_text='The user who uploaded this image', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Placement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='The title to be displayed for this placement', max_length=100, verbose_name='title')),
                ('place_number', models.IntegerField(help_text='A number to help determine where posts of this placement appear the template.')),
                ('show_author', models.BooleanField(default=True, help_text='If the author should be shown in the list of posts. This is just a flag - the template has to be coded appropriately for this to work', verbose_name='show author')),
                ('show_created', models.BooleanField(default=True, help_text='If the creation date should be shown in the list of posts. This is just a flag - the template has to be coded appropriately for this to work', verbose_name='show created')),
            ],
            options={
                'ordering': ('place_number',),
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the thread', max_length=100, verbose_name='Title')),
                ('above_content_image_attributes', models.CharField(blank=True, help_text='The attributes (ie style="width:60%") for the image for the image displayed above content', max_length=70, verbose_name='above content image attributes')),
                ('above_content_image_link', models.URLField(blank=True, help_text='The link for the image displayed above content', verbose_name='above content image link')),
                ('above_content_link_attributes', models.CharField(blank=True, help_text='The attributes (ie target="_blank") for the link for the image displayed above content', max_length=70, verbose_name='above content link attributes')),
                ('below_content_image_attributes', models.CharField(blank=True, help_text='The attributes (ie style="width:60%") for the image for the image displayed below content', max_length=70, verbose_name='below content image attributes')),
                ('below_content_image_link', models.URLField(blank=True, help_text='The link for the image displayed below content', verbose_name='below content image link')),
                ('below_content_link_attributes', models.CharField(blank=True, help_text='The attributes (ie target="_blank") for the link for the image displayed below content', max_length=70, verbose_name='below content link attributes')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date/time this therad was created', verbose_name='created')),
                ('sortable_date', models.DateTimeField(default=datetime.datetime.now, help_text='The modifiable date used for sorting. This is the created date by default. To move a post up, select a future date.', null=True, verbose_name='sortable date')),
                ('sticky', models.BooleanField(default=False, help_text='If this post is stuck to the top. This is used before sortable date', verbose_name='sticky')),
                ('show_author', models.BooleanField(default=True, help_text='If the author should be shown in the detail view. This is just a flag - the template has to be coded appropriately for this to work', verbose_name='show author')),
                ('show_created', models.BooleanField(default=True, help_text='If the creation date should be shown in the detail view. This is just a flag - the template has to be coded appropriately for this to work', verbose_name='show created')),
                ('content_format', models.CharField(choices=[('markdown', 'markdown'), ('html', 'html')], default='markdown', help_text='The format (or markup method) used for the content', max_length=20, verbose_name='content format')),
                ('content', models.TextField(blank=True, help_text='The content of the post', verbose_name='content')),
                ('summary_format', models.CharField(choices=[('same', 'same as content'), ('markdown', 'markdown'), ('html', 'html')], default='same', help_text='The format (or markup method) used for the summary', max_length=20, verbose_name='summary format')),
                ('summary', models.TextField(blank=True, help_text='A shorter version of the content', verbose_name='summary')),
                ('draft_status', models.IntegerField(choices=[(7, 'published'), (3, 'archived'), (0, 'draft')], default=0, help_text='If this post is a draft, which only displays in preview mode', verbose_name='draft status')),
                ('slug', models.SlugField(help_text='The code that provides a character based ID for this page', unique=True)),
                ('above_content_image', models.ForeignKey(blank=True, help_text='The image to display above the content, and to use for social media graphs', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_above_content_image', to='tougcomsys.image')),
                ('author', models.ForeignKey(blank=True, help_text='The user who created ths thread', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('below_content_image', models.ForeignKey(blank=True, help_text='The image to display below the content, and to use for social media graphs if no above_content image is set', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_below_content_image', to='tougcomsys.image')),
                ('list_image', models.ForeignKey(blank=True, help_text='The image to display above the title, and to use for social media graphs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tougcomsys.image')),
                ('placement', models.ForeignKey(blank=True, help_text='The place on the home page', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tougcomsys.placement')),
            ],
            options={
                'ordering': ('-sticky', '-sortable_date'),
            },
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, help_text='The URL of the image. Leave blank to use the Image field. URL will override the image field if URL is not blank', verbose_name='URL')),
                ('slug', models.SlugField(help_text='The slug used to refer to the image in this post (refer to the image with {{ img:my-image }}) if my-image is the slug', verbose_name='slug')),
                ('image', models.ForeignKey(blank=True, help_text='The image included in the post.  Optional if URL is set', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tougcomsys.image')),
                ('post', models.ForeignKey(help_text='The post which includes the image', on_delete=django.db.models.deletion.CASCADE, to='tougcomsys.post')),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the thread', max_length=100, verbose_name='Title')),
                ('above_content_image_link', models.URLField(blank=True, help_text='The link for the image displayed above content', verbose_name='above content image link')),
                ('above_content_link_attributes', models.CharField(blank=True, help_text='The attributes (ie target="_blank") for the link for the image displayed above content', max_length=70, verbose_name='above content attributes')),
                ('below_content_image_link', models.URLField(blank=True, help_text='The link for the image displayed below content', verbose_name='below content image link')),
                ('below_content_link_attributes', models.CharField(blank=True, help_text='The attributes (ie target="_blank") for the link for the image displayed below content', max_length=70, verbose_name='below content attributes')),
                ('slug', models.SlugField(help_text='The code that provides a character based ID for this page', unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date/time this therad was created', verbose_name='created')),
                ('content_format', models.CharField(choices=[('markdown', 'markdown'), ('html', 'html')], default='markdown', help_text='The format (or markup method) used for the content', max_length=20, verbose_name='content format')),
                ('content', models.TextField(blank=True, help_text='The content of the post', verbose_name='content')),
                ('list_order', models.CharField(blank=True, default='~', help_text='A character to determine the place on the list. Numbers are higher than capital letters, which are higher than small letters', max_length=1)),
                ('draft_status', models.IntegerField(choices=[(7, 'published'), (3, 'archived'), (0, 'draft')], default=0, help_text='If this page is a draft, which only displays in preview mode', verbose_name='draft status')),
                ('above_content_image', models.ForeignKey(blank=True, help_text='The image to display above the content, and to use for social media graphs', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='page_above_content_image', to='tougcomsys.image')),
                ('author', models.ForeignKey(blank=True, help_text='The user who created ths thread', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('below_content_image', models.ForeignKey(blank=True, help_text='The image to display below the content, and to use for social media graphs if no above_content image is set', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='page_below_content_image', to='tougcomsys.image')),
            ],
            options={
                'ordering': ('list_order', '-created'),
            },
        ),
        migrations.CreateModel(
            name='EventDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('whenday', models.DateField(help_text='The date of the event', verbose_name='date')),
                ('event', models.ForeignKey(help_text='The event to which this date belongs', on_delete=django.db.models.deletion.CASCADE, to='tougcomsys.event')),
            ],
            options={
                'ordering': ('whenday', 'event'),
            },
        ),
        migrations.AddField(
            model_name='event',
            name='above_content_image',
            field=models.ForeignKey(blank=True, help_text='The image to display above the content, and to use for social media graphs', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_above_content_image', to='tougcomsys.image'),
        ),
        migrations.AddField(
            model_name='event',
            name='below_content_image',
            field=models.ForeignKey(blank=True, help_text='The image to display below the content, and to use for social media graphs if no above_content image is set', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_below_content_image', to='tougcomsys.image'),
        ),
        migrations.AddField(
            model_name='event',
            name='list_image',
            field=models.ForeignKey(blank=True, help_text='The image to display above the title, and to use for social media graphs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tougcomsys.image'),
        ),
        migrations.AddField(
            model_name='event',
            name='post',
            field=models.ForeignKey(blank=True, help_text="The post to use as the content and summary.  If selected, the post content and summary will be used instead of the event's content and summary", null=True, on_delete=django.db.models.deletion.SET_NULL, to='tougcomsys.post'),
        ),
    ]
